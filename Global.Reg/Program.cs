using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Security.Principal;
using System.Windows;

namespace Global.Reg
{
    internal class Program
    {
        //http://woshub.com/how-to-rebuild-corrupted-icon-cache-in-windows-10/

        static void Main(string[] args)
        {
            WindowsIdentity identity = WindowsIdentity.GetCurrent();
            WindowsPrincipal principal = new WindowsPrincipal(identity);
            if (!principal.IsInRole(WindowsBuiltInRole.Administrator))
            {
                MessageBox.Show("请以管理员身份运行");
                return;
            }
            AutoGenerateDumpWhenCrash();
            if (!File.Exists($"{System.Windows.Forms.Application.StartupPath}\\Grid.exe"))
            {
                MessageBox.Show("找不到启动文件夹");
                return;
            }

            if (SetIcon(".gprj", "Grid.Launcher.gprj", System.Windows.Forms.Application.ExecutablePath + " ,0", $"{System.Windows.Forms.Application.StartupPath}\\Grid.exe %1"))
            {
                string Arguments = string.Empty;
                if (Environment.OSVersion.Version.Major == 6)
                {
                    Arguments = "/c gpupdate /force /wait:0 &&ie4uinit.exe -ClearIconCache";
                }
                else if (Environment.OSVersion.Version.Major > 6)
                {
                    Arguments = "/c gpupdate /force /wait:0 &&ie4uinit.exe -show";
                }
                else
                {
                    MessageBox.Show("请重启或者重启Explorer,以刷新注册表");
                    return;
                }

                ProcessStartInfo info = new ProcessStartInfo
                {
                    WindowStyle = ProcessWindowStyle.Hidden,
                    UseShellExecute = false,
                    FileName = "cmd.exe",
                    CreateNoWindow = true,
                    RedirectStandardOutput = true,
                    Arguments = Arguments
                };
                Process process = Process.Start(info);
                process.WaitForExit();
                if (process.ExitCode != 0)
                {
                    MessageBox.Show($"自动刷新图标失败，Process{process.ExitCode}");
                }

            }
        }

        /// <summary>
        /// C# 程序退出 自动生成 内存快照 Dump文件
        /// </summary>
        public static void AutoGenerateDumpWhenCrash()
        {

            //参考文档：https://docs.microsoft.com/en-us/windows/win32/wer/collecting-user-mode-dumps?redirectedfrom=MSDN 

            //注册表里，添加【程序崩溃后，自动生成dump文件配置】
            //注册表需要admin权限！
            try
            {
                var outputDmpPath = AppDomain.CurrentDomain.BaseDirectory + "Dump";
                if (!Directory.Exists(outputDmpPath))
                {
                    Directory.CreateDirectory(outputDmpPath);
                }

                var fileName = System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName;
                var processName = fileName.Substring(fileName.LastIndexOf('\\') + 1);

                //注册表地址
                string regPath = @"SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps\" + "LambdaManager.exe";
                var reg = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64);//Registry64防止注册表重定向到wow64

                var subKey = reg.CreateSubKey(regPath);

                subKey.SetValue("DumpCount", 1, RegistryValueKind.DWord);//dump文件个数
                subKey.SetValue("DumpFolder", outputDmpPath, RegistryValueKind.ExpandString);//dump文件目录
                subKey.SetValue("DumpType", 1, RegistryValueKind.DWord);//dump文件类型

            }
            catch (Exception ex)
            {
                //CLoggerTools.Warning2File(CLoggerFileName.strException, "{0},{1},{2}", "UI.Program", ex.Message, ex.StackTrace.Replace("\r\n", ""));
                return;
            }


        }


        public static bool SetIcon(string Extension, string ExtensionName, string icon, string command)
        {
            RegistryKey regKey = null;
            bool flag = false;
            try
            {
                regKey = Registry.ClassesRoot.CreateSubKey(Extension);
                regKey?.SetValue("", ExtensionName);
                regKey = Registry.ClassesRoot.CreateSubKey(ExtensionName + "\\DefaultIcon");
                regKey?.SetValue("", icon);

                regKey = Registry.ClassesRoot.CreateSubKey(ExtensionName + "\\shell\\open\\command");

                regKey?.SetValue("", command);
                flag = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                flag = false;
            }
            finally
            {
                regKey?.Close();
            }

            return flag;
        }
    }
}
